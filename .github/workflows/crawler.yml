# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Corpus Collection and Annotation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


jobs:
  # Stage 1. Style checks
  install-dependencies:
    name: Installing dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 2

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ./venv/
            ~/.local/bin/mystem
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          bash config/venv_setup.sh
      - name: Confirming everything is OK
        run: |
          ls -la ~/.local/bin
          ls -la venv

  pr-name-check:
    name: PR name check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 2
    needs: [ install-dependencies ]
    env:
      PR_NAME: ${{ github.event.pull_request.title }}
      PR_AUTHOR: ${{ github.actor }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ./venv/
            ~/.local/bin/mystem
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          bash config/venv_setup.sh
      - name: PR name check
        run: |
          bash config/stage_1_style_tests/_stage_pr_name_check.sh "$PR_NAME" "$PR_AUTHOR"

  code-style:
    name: Code Style
    runs-on: ubuntu-latest
    timeout-minutes: 1
    needs: [ install-dependencies ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ./venv/
            ~/.local/bin/mystem
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          bash config/venv_setup.sh
      - name: Code Syle
        run: |
          bash config/stage_1_style_tests/_stage_run_lint.sh

  spellcheck:
    name: Spellcheck
    runs-on: ubuntu-latest
    timeout-minutes: 1
    needs: [ install-dependencies ]
    steps:
      - uses: actions/checkout@master
      - name: Install Aspell
        run: |
          sudo apt-get install aspell aspell-en aspell-ru
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ./venv/
            ~/.local/bin/mystem
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          bash config/venv_setup.sh
      - name: Spell check
        run: |
          bash config/spellcheck/_stage_spellcheck.sh

  # Stage 2. Crawler tests
  checking-crawler-config:
    name: Crawler checks config
    needs: [ code-style ]
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ./venv/
            ~/.local/bin/mystem
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          bash config/venv_setup.sh
      - name: Run crawler config checks
        run: |
          bash config/stage_2_crawler_tests/_stage_check_crawler_config.sh
          ls -la ~/.local/bin

  checking-crawler:
    name: Crawler checks
    needs: [ code-style ]
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ./venv/
            ~/.local/bin/mystem
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          bash config/venv_setup.sh
      - name: Run crawler config checks
        run: |
          bash config/stage_2_crawler_tests/_stage_crawler_checks.sh

  checking-parser:
    name: Parser checks
    needs: [ code-style ]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ./venv/
            ~/.local/bin/mystem
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          bash config/venv_setup.sh
      - name: Run crawler config checks
        run: |
          bash config/stage_2_crawler_tests/_stage_parser_checks.sh

  collecting-articles-from-internet:
    name: Download articles
    needs: [
      checking-crawler-config,
      checking-crawler,
      checking-parser
    ]
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ./venv/
            ~/.local/bin/mystem
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          bash config/venv_setup.sh
      - name: Crawl a raw dataset from web
        run: |
          bash config/stage_2_crawler_tests/_stage_collect_articles.sh
      - name: Archive raw dataset
        uses: actions/upload-artifact@v2
        with:
          name: raw-dataset
          path: |
            tmp/articles
          retention-days: 5

  checking-articles-dataset:
    name: Validate dataset
    needs: [ collecting-articles-from-internet ]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ./venv/
            ~/.local/bin/mystem
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          bash config/venv_setup.sh
      - name: Download previously collected dataset
        continue-on-error: true
        uses: actions/download-artifact@v2
        with:
          name: raw-dataset
      - name: Run metadata validation
        run: |
          bash config/stage_2_crawler_tests/_stage_validate_metadata.sh

  milestone-1-crawler-is-working:
    name: Crawler is accepted!
    needs: [
      checking-articles-dataset,
      spellcheck
    ]
    runs-on: ubuntu-latest
    timeout-minutes: 2

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ./venv/
            ~/.local/bin/mystem
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          bash config/venv_setup.sh
      - name: Download previously collected dataset
        continue-on-error: true
        uses: actions/download-artifact@v2
        with:
          name: raw-dataset
      - name: Congratulations
        run: |
          bash config/stage_2_crawler_tests/_stage_accept_dataset.sh

  # Stage 3. Pipeline tests
  milestone-2-pipeline:
    name: Starting pipeline checks!
    needs: [ milestone-1-crawler-is-working ]
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Congratulations
        run: |
          echo "Preparing pipeline checks"


  checking-raw-dataset-before-running-pipeline:
    name: Pipe verifies dataset
    needs: milestone-2-pipeline
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ./venv/
            ~/.local/bin/mystem
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          bash config/venv_setup.sh
      - name: Download previously collected dataset
        continue-on-error: true
        uses: actions/download-artifact@v2
        with:
          name: raw-dataset
      - name: Run crawler config checks
        run: |
          bash config/stage_3_pipeline_tests/_stage_check_raw_dataset.sh

  checking-corpus-manager-creates-instances-correctly:
    name: CorpusManager detects articles
    needs: milestone-2-pipeline
    runs-on: ubuntu-latest
    timeout-minutes: 2

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ./venv/
            ~/.local/bin/mystem
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          bash config/venv_setup.sh
      - name: Download previously collected dataset
        continue-on-error: true
        uses: actions/download-artifact@v2
        with:
          name: raw-dataset
      - name: Run CorpusManager tests
        run: |
          bash config/stage_3_pipeline_tests/_stage_check_corpus_manager.sh

  checking-morphological-token-works-correctly:
    name: MorphologicalToken displays tokens
    needs: milestone-2-pipeline
    runs-on: ubuntu-latest
    timeout-minutes: 2

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ./venv/
            ~/.local/bin/mystem
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          bash config/venv_setup.sh
      - name: Download previously collected dataset
        continue-on-error: true
        uses: actions/download-artifact@v2
        with:
          name: raw-dataset
      - name: Run MorphologicalToken tests
        run: |
          bash config/stage_3_pipeline_tests/_stage_check_morphological_token.sh

  checking-student-processing-works-for-admin-dataset:
    name: Pipe processed admin data
    needs: milestone-2-pipeline
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ./venv/
            ~/.local/bin/mystem
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          bash config/venv_setup.sh
      - name: Download previously collected dataset
        continue-on-error: true
        uses: actions/download-artifact@v2
        with:
          name: raw-dataset
      - name: Run metadata validation
        run: |
          bash config/stage_3_pipeline_tests/_stage_check_on_admin_dataset.sh

  run-student-processing:
    name: Pipe processed student data
    needs: milestone-2-pipeline
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ./venv/
            ~/.local/bin/mystem
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          bash config/venv_setup.sh
      - name: Download previously collected dataset
        continue-on-error: true
        uses: actions/download-artifact@v2
        with:
          name: raw-dataset
      - name: Run validation of `_processed.txt` files
        run: |
          bash config/stage_3_pipeline_tests/_stage_check_on_student_dataset.sh
      - name: Archive processed dataset
        continue-on-error: true
        uses: actions/upload-artifact@v2
        with:
          name: processed-dataset
          path: |
            tmp/articles
          retention-days: 5

  checking-student-processing-works-for-student-dataset:
    name: Validate final dataset
    needs: run-student-processing
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ./venv/
            ~/.local/bin/mystem
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          bash config/venv_setup.sh
      - name: Download previously collected dataset
        continue-on-error: true
        uses: actions/download-artifact@v2
        with:
          name: processed-dataset
      - name: Run validation of `_processed.txt` files
        run: |
          bash config/stage_3_pipeline_tests/_stage_check_student_processing.sh
  
  running-pos-pipeline-tests:
    name: POSFrequencyPipeline tests
    needs: [
      checking-raw-dataset-before-running-pipeline,
      checking-student-processing-works-for-admin-dataset,
      checking-student-processing-works-for-student-dataset,
      checking-corpus-manager-creates-instances-correctly,
      checking-morphological-token-works-correctly
    ]
    runs-on: ubuntu-latest
    timeout-minutes: 7

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ./venv/
            ~/.local/bin/mystem
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          bash config/venv_setup.sh
      - name: Download previously collected dataset
        continue-on-error: true
        uses: actions/download-artifact@v2
        with:
          name: processed-dataset
      - name: Congratulations
        run: |
          bash config/stage_4_pos_frequency_pipeline_tests/_stage_check_pos_pipeline.sh

  milestone-2-pipeline-is-working:
    name: Pipeline is accepted!
    needs: [
      running-pos-pipeline-tests
    ]
    runs-on: ubuntu-latest
    timeout-minutes: 1

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ./venv/
            ~/.local/bin/mystem
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          bash config/venv_setup.sh
      - name: Download previously collected dataset
        continue-on-error: true
        uses: actions/download-artifact@v2
        with:
          name: processed-dataset
      - name: Congratulations
        run: |
          echo "You have completed the assignment!"
